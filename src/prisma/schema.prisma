generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  username      String
  password String
  //this means if a user created it themselves
  //there's points where a user can create a user for a professional comedian
  //professional comedian will have to create their own password...
  artificiallyCreated   Boolean   @default(true)  
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  //has like objects
  likeObjects LikeObject[] // A user has many LikeObjects
  //jokes relationship, as in user has many jokes
  jokes     Joke[]         // A user has many jokes
  jokeComments JokeComment[] 
  retweets   Retweet[]
  botSenseOfHumorType String? //you are 27 years old, doing great in life, you are a know it all, you are a liberal, etc....
}

model Joke {
  id        String      @id @default(uuid())
  //make content so it stores new line characters(FE and BE problem)
  content   String
  createdAt DateTime @default(now())
  //LikeObject
  likeObjects LikeObject[] // A joke can have many LikeObjects
  retweetObjects Retweet[]
  //user relationship
  userId    String         // Foreign key to User
  user      User           @relation(fields: [userId], references: [id])
  jokeComments JokeComment[] 
  categories Category[] 
  underlyingLikes Int @default(0) // This will store the number of likes for the joke
  integrityCheck Boolean @default(false) 
  aiFunnyScore Int @default(0) // Score given by AI for how funny the joke is
  

}

model Retweet {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  joke    Joke     @relation(fields: [jokeId], references: [id])
  jokeId  String
  createdAt DateTime @default(now())
  retweeted Boolean
  @@unique([userId, jokeId]) // Prevent duplicate retweets
}

//make sure this doesn't get duplicated
model LikeObject {
  id        String      @id @default(uuid())
  liked     Boolean  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relationship with Joke, one joke can have many LikeObjects
  jokeId    String
  joke      Joke         @relation(fields: [jokeId], references: [id])

  //relationship with user, one user creates LikeObject
  userId    String
  user      User         @relation(fields: [userId], references: [id])
}

model Category {
  id       String      @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  //jokes relationship, one category can have many jokes
  jokes     Joke[]         // A category has many Jokes

}

model JokeComment {
  id       String      @id @default(uuid())
  userId   String
  jokeId   String
  content  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  joke      Joke           @relation(fields: [jokeId], references: [id])
  user      User           @relation(fields: [userId], references: [id])
  
  
}

model Competition {
  id        String      @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())  
}

//don't do anything with this AI, don't remove either
// model Payment {
//     id        String      @id @default(uuid())
//     amount    Float
//     currency  String
//     userId    String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }
